function isObservableArray(obj){return ko.isObservable(obj)&&obj.hasOwnProperty("remove")}var initialLocations=[{country:"United States",name:"San Francisco",lat:"",lng:""},{country:"United Kingdom",name:"London",lat:"",lng:""},{country:"Johannesburg",name:"Johannesburg",lat:"",lng:""},{country:"India",name:"Mumbai",lat:"",lng:""},{country:"Taiwan",name:"Taipei",lat:"",lng:""}],Location=function(data){this.name=ko.observable(data.name),this.country=ko.observable(data.country),this.lat=ko.observable(data.lat),this.lng=ko.observable(data.lng),this.title=ko.computed(function(){return data.name&&data.country?this.name()+", "+this.country():""},this)},map,markers=[],nav=document.querySelector(".nav"),menu_icon=document.querySelector(".menu_icon"),markerList=document.getElementsByClassName("marker-list"),addInput=$("#add-input");"undefined"!=typeof ko&&ko.bindingHandlers&&!ko.bindingHandlers.multiselect&&(ko.bindingHandlers.map={init:function(element,valueAccessor,allBindingsAccessor,viewModel,bindingContext){function CenterControl(controlDiv,map){var controlUI=document.createElement("div");controlUI.classList.add("map-button"),controlUI.title="Click to show controls",controlDiv.appendChild(controlUI);var controlText=document.createElement("div");controlText.classList.add("map-button-text"),controlUI.appendChild(controlText),controlText.innerHTML="Center",controlUI.addEventListener("click",function(){bindingContext.$data.fitMap(),bindingContext.$data.deactivateMarker(bindingContext.$data.currentMarker())})}var locationList=ko.unwrap(valueAccessor()),minZoomLevel=0,mapOptions={zoom:minZoomLevel,disableDefaultUI:!0,mapTypeId:google.maps.MapTypeId.ROADMAP};map=new google.maps.Map(element,mapOptions);var centerControlDiv=document.createElement("div");new CenterControl(centerControlDiv,map);centerControlDiv.index=1,map.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControlDiv);new google.maps.places.PlacesService(map);bindingContext.$data.addMarkers(locationList)},update:function(element,valueAccessor,allBindingsAccessor,viewModel,bindingContext){bindingContext.$data.filterLocations(),bindingContext.$data.filterMarkers()}});var ViewModel=function(){function matchQuery(marker){var filter=self.filterString().toLowerCase();return ko.utils.stringStartsWith(marker.name.toLowerCase(),filter)}function callback(result,status){status===google.maps.places.PlacesServiceStatus.OK&&self.addMarker(result[0])}var self=this,defaultLocation=new Location({name:"",country:"",lat:"",lng:""});this.newLocation=ko.observable(defaultLocation),this.filterString=ko.observable(""),this.currentMarker=ko.observable({}),this.isCityValid=ko.observable(!1),this.newLocation.subscribe(function(newValue){console.log(newValue.name(),newValue.country(),newValue.title())}),this.locationList=ko.observableArray(ko.utils.arrayMap(initialLocations,function(locationItem){return new Location(locationItem)})),this.currentLocation=ko.observable(new Location({name:""})),this.toggleNav=function(item,event){nav.classList.toggle("visible"),event.stopPropagation(),menu_icon.classList.contains("contract")?(menu_icon.classList.remove("contract"),menu_icon.classList.add("expand")):(menu_icon.classList.remove("expand"),menu_icon.classList.add("contract"))},this.setCurrentLocation=function(data){self.currentLocation(data)},this.clearCityInput=function(){addInput.val("")},this.closeControls=function(){nav.classList.remove("visible"),menu_icon.classList.remove("expand"),menu_icon.classList.add("contract")},this.initAutoComplete=function(){addInput.autocomplete({source:function(request,response){$.ajax({url:"http://gd.geobytes.com/AutoCompleteCity",dataType:"jsonp",data:{q:request.term},success:function(data){response(data)}})},minLength:3,select:function(event,ui){var selectedObj=ui.item;return $.getJSON("http://gd.geobytes.com/GetCityDetails?callback=?&fqcn="+selectedObj.value,function(data){console.log(data);var city=data.geobytescity,country=data.geobytescountry;"United States"===country&&(country="USA"),"United Kingdom"===country&&(country="UK");var lat=data.geobyteslatitude,lng=data.geobyteslongitude;return self.newLocation(new Location({name:city,country:country,lat:lat,lng:lng})),self.addLocation(),$(this).val(""),!1}),!1},open:function(){$(this).removeClass("ui-corner-all").addClass("ui-corner-top")},close:function(){$(this).removeClass("ui-corner-top").addClass("ui-corner-all")}})}(self),this.setMessage=function(elem,msg){$(elem).html(msg)},this.addLocation=function(){function addToList(locObject){self.locationList.push(locObject),self.filterLocations()}function addThisMarker(locObj){var request,service=new google.maps.places.PlacesService(map);request={query:locObj.title()},service.textSearch(request,callback)}if(self.newLocation()){var newCity=(self.newLocation().name()+", "+self.newLocation().country()).toLowerCase(),input=addInput.val().toLowerCase();if(newCity===input){self.clearSearch();var locationObj=self.newLocation(),match=ko.utils.arrayFirst(self.locationList(),function(item){return locationObj.name()===item.name()});if(match){var msg=match.name()+" is already in your list";return alert(msg),self.setMessage(".add-msg","<b><i>"+match.name()+"</i></b> is already in your list. \n Please enter a different city"),self.isCityValid(!1),addInput.autocomplete("close"),void addInput.val("")}addToList(locationObj),addThisMarker(locationObj),self.setMessage(".add-msg",locationObj.name()+" has been added to your list"),self.closeControls(),addInput.val(""),markerList.scrollTop=markerList.scrollHeight}}},this.clearSearch=function(){self.filterString("")},this.filterLocations=ko.computed(function(){var filter=self.filterString().toLowerCase();return filter?(arr=ko.utils.arrayFilter(self.locationList(),function(item){return ko.utils.stringStartsWith(item.title().toLowerCase(),filter)}),arr):self.locationList()}),this.filterMarkers=function(){for(var i=(new google.maps.places.PlacesService(map),0);i<markers.length;i++){var marker=markers[i];matchQuery(marker)?self.showMarker(marker):self.hideMarker(marker)}},this.selectThisPlace=function(place){for(var i=0;i<markers.length;i++){var marker=markers[i];self.deactivateMarker(marker),place().toLowerCase()===marker.name.toLowerCase()&&self.activateMarker(marker)}self.closeControls()},this.selectThisMarker=function(marker){for(var i=0;i<markers.length;i++)markerItem=markers[i],self.deactivateMarker(markerItem),markerItem.name===marker.name&&self.activateMarker(marker);self.closeControls()},this.offsetMap=function(){map.panBy(0,-180)},this.activateMarker=function(marker){self.currentMarker(marker),marker.setIcon("http://maps.google.com/mapfiles/ms/icons/green-dot.png"),marker.isSelected=!0,self.setInfoWindow(marker),marker.infoWindow.open(map,marker),marker.toggleBounce();var latLng=marker.getPosition();map.setCenter(latLng),map.setZoom(4),self.offsetMap(),self.selectItem(marker,!0)},this.deactivateMarker=function(marker){marker.setIcon("http://maps.google.com/mapfiles/ms/icons/red-dot.png"),marker.isSelected=!1,marker.infoWindow.close(),marker.toggleBounce(),self.selectItem(marker,!1)},this.showMarker=function(marker){for(var i=0;i<markers.length;i++)markers[i]===marker&&(markers[i].setMap(map),self.deactivateMarker(marker))},this.hideMarker=function(marker){for(var i=0;i<markers.length;i++)markers[i]===marker&&markers[i].setMap(null)},this.addMarkers=function(locObjList){var request,service=new google.maps.places.PlacesService(map);locObjList.forEach(function(place){request={query:place.title()},service.textSearch(request,callback)})},this.setInfoWindow=function(marker){var wikiHtmlString,baseUrl="http://en.wikipedia.org",wikiUrl=baseUrl+"/w/api.php?action=opensearch&search="+marker.name+"&format=json&callback=wikiCallback",wikiRequestTimeout=setTimeout(function(){wikiHtmlString="Failed to get wikipedia resources",marker.infoWindow.setContent(wikiHtmlString)},8e3);$.ajax({url:wikiUrl,dataType:"jsonp",async:!0}).done(function(response){var title=response[1][0],body=response[2][0],url=baseUrl+"/wiki/"+title;wikiHtmlString='<a href="'+url+'">'+title+"</a><div>"+body+"</div>";var nameArr=marker.title.split(","),city=nameArr[0],country=nameArr[nameArr.length-1],contentString='<div id="content" ><div id="siteNotice"></div><h1 id="firstHeading" class="firstHeading">'+city+'<span id="secondHeading" class="secondHeading">'+country+'</span></h1><div id="bodyContent"><a class="readMore" href="'+url+'" target="_blank">Read More...</a><div class="infoBody">'+body+"</div></div></div>";clearTimeout(wikiRequestTimeout),marker.infoWindow.setContent(contentString)})},this.selectItem=function(marker,isTrue){for(var $items=(self.filterLocations(),document.getElementsByClassName("list-item")),i=0;i<$items.length;i++)$items[i].textContent.toLowerCase()===marker.title.toLowerCase()&&(isTrue?$items[i].classList.add("active"):$items[i].classList.remove("active"))},this.fitMap=function(){var bounds=new google.maps.LatLngBounds;for(i=0;i<markers.length;i++)bounds.extend(markers[i].getPosition());map.fitBounds(bounds)},this.normalizeTitle=function(str){var result=str.replace(/^\s+|\s+$/g,"");return result},this.addMarker=function(place){var cityArr=(place.geometry.location.lat(),place.geometry.location.lng(),place.formatted_address,place.formatted_address.split(",")),city=self.normalizeTitle(cityArr[0]),country=self.normalizeTitle(cityArr[cityArr.length-1]),formattedAddress_short=city+", "+country,activeIcon=(window.mapBounds,"http://maps.google.com/mapfiles/ms/icons/green-dot.png"),inactiveIcon="http://maps.google.com/mapfiles/ms/icons/red-dot.png",marker=new google.maps.Marker({map:map,icon:inactiveIcon,animation:google.maps.Animation.DROP,position:place.geometry.location,title:formattedAddress_short,name:place.name});marker.infoWindow=new google.maps.InfoWindow({content:"<i class='loading' title='Loading...'></i> Loading...",maxWidth:200}),marker.toggleBounce=function(){var self=this;self.isSelected?self.setAnimation(google.maps.Animation.BOUNCE):self.setAnimation(null)},markers.push(marker),self.currentMarker(marker),self.fitMap(),formattedAddress_short.toLowerCase()===self.newLocation().title().toLowerCase()&&self.selectThisMarker(marker),google.maps.event.addListener(marker,"click",function(){self.selectThisMarker(marker)}),google.maps.event.addListener(marker.infoWindow,"closeclick",function(){self.deactivateMarker(marker),self.fitMap()}),google.maps.event.addListener(marker,"mouseover",function(){marker.setIcon(activeIcon)}),google.maps.event.addListener(marker,"mouseout",function(){marker.isSelected||marker.setIcon(inactiveIcon)}),google.maps.event.addDomListener(window,"resize",function(){self.fitMap()})}};ko.utils.stringStartsWith=function(string,startsWith){return string=string||"",startsWith.length>string.length?!1:string.substring(0,startsWith.length)===startsWith};